

    *** State Server Architecture ***



Client side Dispatcher:

    - Socket to state server
    - Check if state variable update
        -> switch case on UID
            -> update local state estimation



State Server
    
    - Subscription server
        - TCP
        - Message structure
            - State variable UID

    - Sensor input server
        - TCP (lossless, flow control, congestion control)
        - Message structure
            - UID
            - Timestamp
            - Data
                - Hash
                - Variable byte array 
    
    - State estimation (i.e. Kalman etc.)
        - Locking FIFO state updates with sensor values

    
    - State variable distribution
        - TCP (same socket as subscription)
        - Message structure
            - UID
            - State variable sequence number
            - Timestamp
            - Data
                - Hash
                - Variable byte array 
    
    - What if more than one sensor value has been received before the state update
      could be finished?

    - (Backup?)

    - Sensor calibration?


State variables
    - Data structure
        - UID
        - State variable sequence number
        - Timestamp
        - Data
        - List of 'Client-Objects'
            - TCP socket

    - History?
    - Hierarchy?




Libs & Tools
    - Message unpacking from TCP stream (+ sender side)
        - Construct message structure from input stream
        - Callback corresponding to message hash

    - Kalman filter
        - Unscented Kalman filter

    - Particle filter?

